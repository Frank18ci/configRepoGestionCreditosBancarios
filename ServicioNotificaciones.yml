spring:
  datasource:
    url: jdbc:postgresql://localhost:5444/db_notificaciones
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notificaciones-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: org.nttdata.com.servicionotificaciones.consumer.dto.NotificacionRequestK
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
  cloud:
    loadbalancer:
      retry:
        enabled: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000/realms/GestionCreditosBancarios
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    # Para cargar data.sql al inicio
    defer-datasource-initialization: true

  sql:
    init:
      mode: always

  mail:
    host: ${EMAIL_HOST}
    port: ${EMAIL_PORT}
    username: ${EMAIL_USERNAME}
    password: ${EMAIL_PASSWORD}
    properties:
        mail:
            smtp:
              auth: true
              starttls:
                  enable: true
            timeout: 5000

server:
  port: 8089

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha

eureka:
    client:
        service-url:
            defaultZone: http://localhost:8761/eureka/
